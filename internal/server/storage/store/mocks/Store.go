// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/e1m0re/grdn/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Clear provides a mock function with given fields: ctx
func (_m *Store) Clear(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Store) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMetrics provides a mock function with given fields: ctx
func (_m *Store) GetAllMetrics(ctx context.Context) (*models.MetricsList, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMetrics")
	}

	var r0 *models.MetricsList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.MetricsList, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.MetricsList); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MetricsList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetric provides a mock function with given fields: ctx, mType, mName
func (_m *Store) GetMetric(ctx context.Context, mType string, mName string) (*models.Metric, error) {
	ret := _m.Called(ctx, mType, mName)

	if len(ret) == 0 {
		panic("no return value specified for GetMetric")
	}

	var r0 *models.Metric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Metric, error)); ok {
		return rf(ctx, mType, mName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Metric); ok {
		r0 = rf(ctx, mType, mName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, mType, mName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *Store) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Restore provides a mock function with given fields: ctx
func (_m *Store) Restore(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx
func (_m *Store) Save(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMetrics provides a mock function with given fields: ctx, metrics
func (_m *Store) UpdateMetrics(ctx context.Context, metrics models.MetricsList) error {
	ret := _m.Called(ctx, metrics)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetrics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.MetricsList) error); ok {
		r0 = rf(ctx, metrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
