// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/e1m0re/grdn/internal/models"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *Manager) GetAll(ctx context.Context) (*models.MetricsList, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *models.MetricsList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.MetricsList, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.MetricsList); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MetricsList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetric provides a mock function with given fields: ctx, mType, mName
func (_m *Manager) GetMetric(ctx context.Context, mType string, mName string) (*models.Metric, error) {
	ret := _m.Called(ctx, mType, mName)

	if len(ret) == 0 {
		panic("no return value specified for GetMetric")
	}

	var r0 *models.Metric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Metric, error)); ok {
		return rf(ctx, mType, mName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Metric); ok {
		r0 = rf(ctx, mType, mName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, mType, mName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimpleMetricsList provides a mock function with given fields: ctx
func (_m *Manager) GetSimpleMetricsList(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSimpleMetricsList")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetric provides a mock function with given fields: ctx, metric
func (_m *Manager) UpdateMetric(ctx context.Context, metric models.Metric) error {
	ret := _m.Called(ctx, metric)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetric")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Metric) error); ok {
		r0 = rf(ctx, metric)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMetrics provides a mock function with given fields: ctx, _a1
func (_m *Manager) UpdateMetrics(ctx context.Context, _a1 models.MetricsList) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetrics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.MetricsList) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
